import base64
import io
import json
import boto3
from PIL import Image

from botocore.exceptions import ClientError
from enum import Enum


class StyleEnum(Enum):
    Photographic = "photographic"
    Tile_texture = "tile-texture"
    Digital_art = "digital-art"
    Origami = "origami"
    Modeling_compound = "modeling-compound"
    Anime = "anime"
    Cinematic = "cinematic"
    Model_3D = "3d-model"
    Comicbook = "comic-book"
    Enhance = "enhance"
    
class ImageError(Exception):
    "Custom exception for errors returned by SDXL"
    def __init__(self, message):
        self.message = message


    

def generate_image(model_id, body):
    """
    Generate an image using SDXL 1.0 on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    # logger.info("Generating image with SDXL model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')
   
    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    base64_bytes = response_body.get("images")[0].encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("error")

    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    return image_bytes

def generate( prompt,style_preset=StyleEnum.Photographic.value):
    # model_id='stability.stable-diffusion-xl-v1'
    model_id='amazon.titan-image-generator-v1'
    # body=json.dumps(
    # {
    #     "text_prompts": [
    #     {
    #     "text": prompt
    #     }
    # ],
    # "cfg_scale": 7,
    # "seed": 0,
    # "steps": 30,
    # "samples" : 1,
    # "style_preset" : style_preset
    # })
    body=json.dumps(
    {
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": prompt
        },
        "imageGenerationConfig": {
            "numberOfImages": 1,
            "height": 512,
            "width": 512,
            "cfgScale": 8.0,
            "seed": 0
        }
    })
    image= None
    try:
        image_bytes=generate_image(model_id = model_id,
                                 body = body)
        image = Image.open(io.BytesIO(image_bytes))
        # logger.info("Successfully generated image with the SDXL 1.0 model %s", model_id)
    except ClientError as err:
        message=err.response["Error"]["Message"]
        # logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        # logger.error(err.message)
        print(err.message)
    finally:
        return image
    
if __name__ == "__main__":
    image = generate(prompt='a button of upload',style_preset=StyleEnum.Photographic.value)
    # image.show()
    if image:
        image.show()